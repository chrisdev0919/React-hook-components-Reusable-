// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macro no usage: no usage 1`] = `
"
import { reuseState } from \\"../src/reuseable.macro\\";

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseState as _reuseState } from \\"reusable\\";

"
`;

exports[`macro should work with { reuseCallback } with dependencies: should work with { reuseCallback } with dependencies 1`] = `
"
import { reuseCallback } from \\"../src/reuseable.macro\\";

const counter = () => {
  const count = reuseCallback(() => {}, []);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseCallback as _reuseCallback } from \\"reusable\\";

const counter = () => {
  const count = _reuseCallback(() => {}, [], \\"count\\");
};

"
`;

exports[`macro should work with { reuseCallback } without dependencies: should work with { reuseCallback } without dependencies 1`] = `
"
import { reuseCallback } from \\"../src/reuseable.macro\\";

const counter = () => {
  const count = reuseCallback(() => {});
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseCallback as _reuseCallback } from \\"reusable\\";

const counter = () => {
  const count = _reuseCallback(() => {}, undefined, \\"count\\");
};

"
`;

exports[`macro should work with { reuseEffect }: should work with { reuseEffect } 1`] = `
"
import { reuseEffect } from \\"../src/reuseable.macro\\";

const counter = () => {
  reuseEffect(() => {
  
  }, []);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseEffect as _reuseEffect } from \\"reusable\\";

const counter = () => {
  _reuseEffect(() => {}, [], \\"counter reuseEffect (0)\\");
};

"
`;

exports[`macro should work with { reuseMemo } with variable: should work with { reuseMemo } with variable 1`] = `
"
import { reuseMemo } from \\"../src/reuseable.macro\\";

const counter = () => {
  const count = reuseMemo(() => null)
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseMemo as _reuseMemo } from \\"reusable\\";

const counter = () => {
  const count = _reuseMemo(() => null, undefined, \\"count\\");
};

"
`;

exports[`macro should work with { reuseMemo }: should work with { reuseMemo } 1`] = `
"
import { reuseMemo } from \\"../src/reuseable.macro\\";

const counter = () => {
  reuseMemo(() => {
  
  }, []);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseMemo as _reuseMemo } from \\"reusable\\";

const counter = () => {
  _reuseMemo(() => {}, [], \\"counter reuseMemo (0)\\");
};

"
`;

exports[`macro should work with { reuseReducer } with initial state: should work with { reuseReducer } with initial state 1`] = `
"
import { reuseReducer } from \\"../src/reuseable.macro\\";

const reducer = (state, action) => state;
const initialState = {};

const counter = () => {
  const count = reuseReducer(reducer, initialState);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseReducer as _reuseReducer } from \\"reusable\\";

const reducer = (state, action) => state;

const initialState = {};

const counter = () => {
  const count = _reuseReducer(reducer, initialState, \\"count\\");
};

"
`;

exports[`macro should work with { reuseReducer } without initial state: should work with { reuseReducer } without initial state 1`] = `
"
import { reuseReducer } from \\"../src/reuseable.macro\\";

const reducer = (state, action) => state;

const counter = () => {
  const count = reuseReducer(reducer);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseReducer as _reuseReducer } from \\"reusable\\";

const reducer = (state, action) => state;

const counter = () => {
  const count = _reuseReducer(reducer, undefined, \\"count\\");
};

"
`;

exports[`macro should work with { reuseRef }: should work with { reuseRef } 1`] = `
"
import { reuseRef } from \\"../src/reuseable.macro\\";

const counter = () => {
  const count = reuseRef(0);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseRef as _reuseRef } from \\"reusable\\";

const counter = () => {
  const count = _reuseRef(0, \\"count\\");
};

"
`;

exports[`macro should work with { reuseState } shorthand: should work with { reuseState } shorthand 1`] = `
"
import { reuseState } from \\"../src/reuseable.macro\\";

const counter = () => reuseState(0)

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseState as _reuseState } from \\"reusable\\";

const counter = () => _reuseState(0, \\"counter\\");

"
`;

exports[`macro should work with { reuseState }: should work with { reuseState } 1`] = `
"
import { reuseState } from \\"../src/reuseable.macro\\";

const counter = () => {
  const [count, setCount] = reuseState(0);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { reuseState as _reuseState } from \\"reusable\\";

const counter = () => {
  const [count, setCount] = _reuseState(0, \\"count\\");
};

"
`;
